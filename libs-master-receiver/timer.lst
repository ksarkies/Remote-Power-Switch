   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 104               	.global	timer0Init
 106               	timer0Init:
 107               		.stabd	46,0,0
   1:../libs-master-receiver/timer.c **** /**
   2:../libs-master-receiver/timer.c **** @mainpage Atmel AVR Timer Library
   3:../libs-master-receiver/timer.c **** @version 0.1
   4:../libs-master-receiver/timer.c **** @author Ken Sarkies (www.jiggerjuice.net) adapted from code by Chris Efstathiou
   5:../libs-master-receiver/timer.c **** @date 2 September 2007
   6:../libs-master-receiver/timer.c **** @brief Library of timer functions for the Atmel AVR microcontrollers.
   7:../libs-master-receiver/timer.c **** 
   8:../libs-master-receiver/timer.c **** This library aims to provide a range of timer functions for initializing and
   9:../libs-master-receiver/timer.c **** controlling the opertaion of the timers. It appears to be somewhat difficult to
  10:../libs-master-receiver/timer.c **** provide a complete set of general functions despite a good compatibility
  11:../libs-master-receiver/timer.c **** between timers within the Atmel range of AVR processors, because the ISRs are
  12:../libs-master-receiver/timer.c **** often used in a wide variety of different ways specific to the application. The
  13:../libs-master-receiver/timer.c **** use of callback functions to the application can result in heavy use of
  14:../libs-master-receiver/timer.c **** resources.
  15:../libs-master-receiver/timer.c **** 
  16:../libs-master-receiver/timer.c **** Currently only timer 0 is supported here with initialization and reading of its
  17:../libs-master-receiver/timer.c **** value.
  18:../libs-master-receiver/timer.c **** 
  19:../libs-master-receiver/timer.c **** @note Software: AVR-GCC 3.4.5
  20:../libs-master-receiver/timer.c **** @note Target:   All Atmel MCUs with timer functionality
  21:../libs-master-receiver/timer.c **** @note Tested:   ATMega88 at 8MHz.
  22:../libs-master-receiver/timer.c **** */
  23:../libs-master-receiver/timer.c **** /***************************************************************************
  24:../libs-master-receiver/timer.c ****  *   Copyright (C) 2007 by Ken Sarkies                                     *
  25:../libs-master-receiver/timer.c ****  *   ksarkies@trinity.asn.au                                               *
  26:../libs-master-receiver/timer.c ****  *                                                                         *
  27:../libs-master-receiver/timer.c ****  *   This file is part of Acquisition                                      *
  28:../libs-master-receiver/timer.c ****  *                                                                         *
  29:../libs-master-receiver/timer.c ****  *   Acquisition is free software; you can redistribute it and/or modify   *
  30:../libs-master-receiver/timer.c ****  *   it under the terms of the GNU General Public License as published by  *
  31:../libs-master-receiver/timer.c ****  *   the Free Software Foundation; either version 2 of the License, or     *
  32:../libs-master-receiver/timer.c ****  *   (at your option) any later version.                                   *
  33:../libs-master-receiver/timer.c ****  *                                                                         *
  34:../libs-master-receiver/timer.c ****  *   Acquisition is distributed in the hope that it will be useful,        *
  35:../libs-master-receiver/timer.c ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  36:../libs-master-receiver/timer.c ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  37:../libs-master-receiver/timer.c ****  *   GNU General Public License for more details.                          *
  38:../libs-master-receiver/timer.c ****  *                                                                         *
  39:../libs-master-receiver/timer.c ****  *   You should have received a copy of the GNU General Public License     *
  40:../libs-master-receiver/timer.c ****  *   along with Acquisition if not, write to the                           *
  41:../libs-master-receiver/timer.c ****  *   Free Software Foundation, Inc.,                                       *
  42:../libs-master-receiver/timer.c ****  *   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA.             *
  43:../libs-master-receiver/timer.c ****  ***************************************************************************/
  44:../libs-master-receiver/timer.c **** #define TRUE  1
  45:../libs-master-receiver/timer.c **** #define FALSE 0
  46:../libs-master-receiver/timer.c **** 
  47:../libs-master-receiver/timer.c **** #include <avr/io.h>
  48:../libs-master-receiver/timer.c **** #include <avr/interrupt.h>
  49:../libs-master-receiver/timer.c **** #include "timer.h"
  50:../libs-master-receiver/timer.c **** 
  51:../libs-master-receiver/timer.c **** /****************************************************************************/
  52:../libs-master-receiver/timer.c **** /**
  53:../libs-master-receiver/timer.c ****     @brief   Initialise Timer 0
  54:../libs-master-receiver/timer.c **** 
  55:../libs-master-receiver/timer.c **** This function will initialise the timer with the mode of operation and the
  56:../libs-master-receiver/timer.c **** clock rate to be used. An error will be returned if the timer is busy.
  57:../libs-master-receiver/timer.c **** 
  58:../libs-master-receiver/timer.c **** Because ATMega64, ATMega128, ATMega103 offer different scale factors, there
  59:../libs-master-receiver/timer.c **** needs to be a conversion provided between the specification here and the scale
  60:../libs-master-receiver/timer.c **** setting. The additional clock settings provided for those MCUs are not used
  61:../libs-master-receiver/timer.c **** here, nor are the external clock settings of the remaining MCUs.
  62:../libs-master-receiver/timer.c **** 
  63:../libs-master-receiver/timer.c **** Timer 0 is typically an 8-bit timer and has very basic functionality. Some MCUs
  64:../libs-master-receiver/timer.c **** offer PWM capability while most do not.
  65:../libs-master-receiver/timer.c **** 
  66:../libs-master-receiver/timer.c ****     @param  mode
  67:../libs-master-receiver/timer.c ****             Ignored for simple timers.
  68:../libs-master-receiver/timer.c ****     @param  timerClock
  69:../libs-master-receiver/timer.c ****             00  Stopped
  70:../libs-master-receiver/timer.c ****             01  F_CLK
  71:../libs-master-receiver/timer.c ****             02  F_CLK/8
  72:../libs-master-receiver/timer.c ****             03  F_CLK/64
  73:../libs-master-receiver/timer.c ****             04  F_CLK/256
  74:../libs-master-receiver/timer.c ****             05  F_CLK/1024
  75:../libs-master-receiver/timer.c **** 
  76:../libs-master-receiver/timer.c **** The timer continues to run until it is stopped by calling this function with
  77:../libs-master-receiver/timer.c **** timerClock=0. At the moment, mode does nothing.
  78:../libs-master-receiver/timer.c **** */
  79:../libs-master-receiver/timer.c **** 
  80:../libs-master-receiver/timer.c **** void timer0Init(uint8_t mode,uint16_t timerClock)
  81:../libs-master-receiver/timer.c **** {
 109               	.LM0:
 110               	.LFBB1:
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  82:../libs-master-receiver/timer.c ****   if (timerClock > 5) timerClock = 5;
  83:../libs-master-receiver/timer.c **** #if defined(__AVR_ATMega64__) || \
  84:../libs-master-receiver/timer.c ****     defined(__AVR_ATMega128__) || \
  85:../libs-master-receiver/timer.c ****     defined(__AVR_ATMega103)
  86:../libs-master-receiver/timer.c **** /* Rescale clock values to match those of the above MCUs */
  87:../libs-master-receiver/timer.c ****   if (timerClock > 2) ++timerClock;
  88:../libs-master-receiver/timer.c ****   if (timerClock > 4) ++timerClock;
  89:../libs-master-receiver/timer.c **** #endif
  90:../libs-master-receiver/timer.c ****   outb(TIMER_CONT_REG0,((inb(TIMER_CONT_REG0) & 0xF8)|(timerClock & 0x07)));
 116               	.LM1:
 117 0000 25B5      		in r18,0x25
 118 0002 CB01      		movw r24,r22
 119 0004 6630      		cpi r22,6
 120 0006 7105      		cpc r23,__zero_reg__
 121 0008 00F0      		brlo .L2
 122 000a 85E0      		ldi r24,lo8(5)
 123 000c 90E0      		ldi r25,0
 124               	.L2:
 125 000e 922F      		mov r25,r18
 126 0010 987F      		andi r25,lo8(-8)
 127 0012 982B      		or r25,r24
 128 0014 95BD      		out 0x25,r25
  91:../libs-master-receiver/timer.c **** #if defined (TCNT0L)
  92:../libs-master-receiver/timer.c ****   outw(TCNT0,0);                    /* 16 bit - clear both registers */
  93:../libs-master-receiver/timer.c **** #else
  94:../libs-master-receiver/timer.c ****   outb(TCNT0,0);                    /* Clear the register */
 130               	.LM2:
 131 0016 16BC      		out 0x26,__zero_reg__
  95:../libs-master-receiver/timer.c **** #endif
  96:../libs-master-receiver/timer.c **** #if (TIMER_INTERRUPT_MODE == 1)
  97:../libs-master-receiver/timer.c ****   sbi(TIMER_FLAG_REG0, TOV0);       /* Force clear the interrupt flag */
 133               	.LM3:
 134 0018 A89A      		sbi 0x15,0
  98:../libs-master-receiver/timer.c ****   sbi(TIMER_MASK_REG0, TOIE0);      /* Enable the overflow interrupt */
 136               	.LM4:
 137 001a 8091 6E00 		lds r24,110
 138 001e 8160      		ori r24,lo8(1)
 139 0020 8093 6E00 		sts 110,r24
  99:../libs-master-receiver/timer.c ****   sei();
 141               	.LM5:
 142               	/* #APP */
 143               	 ;  99 "../libs-master-receiver/timer.c" 1
 144 0024 7894      		sei
 145               	 ;  0 "" 2
 146               	/* #NOAPP */
 147 0026 0895      		ret
 149               	.Lscope1:
 151               		.stabd	78,0,0
 153               	.global	timer0Read
 155               	timer0Read:
 156               		.stabd	46,0,0
 100:../libs-master-receiver/timer.c **** #endif
 101:../libs-master-receiver/timer.c **** }
 102:../libs-master-receiver/timer.c **** 
 103:../libs-master-receiver/timer.c **** /****************************************************************************/
 104:../libs-master-receiver/timer.c **** /**
 105:../libs-master-receiver/timer.c ****     @brief   Read Timer 0
 106:../libs-master-receiver/timer.c **** 
 107:../libs-master-receiver/timer.c **** This function will return the current timer value as a 16 bit unsigned integer
 108:../libs-master-receiver/timer.c **** even if the timer is only 8 bit. This allows for a possibility of a 16 bit
 109:../libs-master-receiver/timer.c **** timer being at timer 0 (so far this is not the case in any MCU).
 110:../libs-master-receiver/timer.c **** 
 111:../libs-master-receiver/timer.c **** In the event of a 16 bit register, the hardware registers must be accessed
 112:../libs-master-receiver/timer.c **** high byte first. The avr-gcc compiler does this automatically.
 113:../libs-master-receiver/timer.c **** 
 114:../libs-master-receiver/timer.c ****     @return Timer Value.
 115:../libs-master-receiver/timer.c **** */
 116:../libs-master-receiver/timer.c **** 
 117:../libs-master-receiver/timer.c **** uint16_t timer0Read()
 118:../libs-master-receiver/timer.c **** {
 158               	.LM6:
 159               	.LFBB2:
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
 119:../libs-master-receiver/timer.c **** #if defined (TCNT0L)
 120:../libs-master-receiver/timer.c ****   return inw(TCNT0);
 121:../libs-master-receiver/timer.c **** #else
 122:../libs-master-receiver/timer.c ****   return (int16_t) inb(TCNT0);
 165               	.LM7:
 166 0028 86B5      		in r24,0x26
 123:../libs-master-receiver/timer.c **** #endif
 124:../libs-master-receiver/timer.c **** }
 168               	.LM8:
 169 002a 90E0      		ldi r25,0
 170 002c 0895      		ret
 172               	.Lscope2:
 174               		.stabd	78,0,0
 176               	.Letext0:
 177               		.ident	"GCC: (GNU) 4.8.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccSUijFp.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSUijFp.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSUijFp.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSUijFp.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSUijFp.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSUijFp.s:106    .text:0000000000000000 timer0Init
     /tmp/ccSUijFp.s:155    .text:0000000000000028 timer0Read

NO UNDEFINED SYMBOLS
